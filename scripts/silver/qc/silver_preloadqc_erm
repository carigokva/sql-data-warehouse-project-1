/* Script purpose:
	Quality check of tables from bronze_erp to identify issues before loading data into table
    
    naming of file <layer>_purpose_<source>
*/

--  Select the schema where the project is stored.
	USE project1_datawarehouse;
    

-- =========================================================================================
-- bronze_erp_cust_az12
SELECT * FROM bronze_erp_cust_az12;

-- cid
-- no duplicate values. remove unwanted, then check for duplicated values.
-- no unwanted space
-- no nulls and blank values
-- cid must be IN <SELECT cst_key FROM silver_crm_cust_info>
SELECT cid, COUNT(*)
FROM bronze_erp_cust_az12
GROUP BY cid
HAVING COUNT(*) > 1;

SELECT cid
FROM bronze_erp_cust_az12
WHERE
	cid != TRIM(cid) OR
    cid IS NULL;
    
SELECT cid
FROM bronze_erp_cust_az12
WHERE cid NOT IN (SELECT cst_key FROM silver_crm_cust_info);

-- REMOVE 'NAS' from cid records when the first 3 characters of cid is 'NAS'
SELECT 
	TRIM(cid) as cid,
    CASE
		WHEN SUBSTRING(TRIM(cid), 1, 3) = 'NAS' THEN SUBSTRING(TRIM(cid), 4, LENGTH(TRIM(cid)) - 3)
        ELSE TRIM(cid)
	END as cid_new,
    bdate,
    gen
FROM bronze_erp_cust_az12;

-- --------------------------------------------------------------------------------------------
-- bdate
-- character length = 10 QC
-- no nulls and blank values
SELECT bdate
FROM bronze_erp_cust_az12
WHERE 
bdate IS NULL OR LENGTH(bdate) != 10;

-- --------------------------------------------------------------------------------------------
-- gen
-- no nulls and blank values
-- no unwanted space
-- standardize values: 'Male' / 'Female' / 'N/A' values only. No M / F / NULL
SELECT DISTINCT gen
FROM bronze_erp_cust_az12;

-- script to standardize values and address NULLs
SELECT DISTINCT
	gen,
    CASE
		WHEN TRIM(gen) = 'M' THEN 'Male'
        WHEN TRIM(gen) = 'F' THEN 'Female'
        WHEN TRIM(gen) IS NULL THEN 'n/a'
        ELSE TRIM(gen)
	END as gen_new
FROM bronze_erp_cust_az12;

-- =========================================================================================
-- bronze_erp_loc_a101
SELECT * FROM bronze_erp_loc_a101;

-- cid
-- no duplicate values. remove unwanted, then check for duplicated values.
-- no unwanted space
-- no nulls and blank values
-- all cid in <SELECT cst_key FROM silver_crm_cust_info>

SELECT cid, COUNT(*)
FROM bronze_erp_loc_a101
GROUP BY cid
HAVING COUNT(*) > 1;

SELECT cid
FROM bronze_erp_loc_a101
WHERE
	cid != TRIM(cid) OR
    cid IS NULL;
    
SELECT cid
FROM bronze_erp_loc_a101
WHERE cid NOT IN (SELECT cst_key FROM silver_crm_cust_info);

-- remove '-' from cid records
-- remove any unwanted space from cid records
SELECT 
	cid,
    REPLACE(TRIM(cid), '-', '') as cid_new,
    cntry
FROM bronze_erp_loc_a101;

-- --------------------------------------------------------------------------------------------
-- cntry
-- no unwanted space
-- no nulls and blank values
-- standardize values: 'Male' / 'Female' / 'N/A' values only. No M / F / NULL
-- no record with the same meaning: US / USA / United States / United State of America etc..
SELECT DISTINCT cntry
FROM bronze_erp_loc_a101;

-- replace NULL values
-- US and USA to United States
-- DE to Germany
-- remove any unwanted space

SELECT DISTINCT
	cntry,
    CASE 
		WHEN TRIM(cntry) = 'US' THEN 'United States'
        WHEN TRIM(cntry) = 'USA' THEN 'United States'
        WHEN TRIM(cntry) ='DE' THEN 'Germany'
        WHEN TRIM(cntry) IS NULL THEN 'n/a'
        ELSE TRIM(cntry)
	END as cntry_new
FROM bronze_erp_loc_a101;


-- =========================================================================================
-- bronze_erp_px_cat_g1v2
SELECT * FROM bronze_erp_px_cat_g1v2;

-- id
-- id format must be same with <SELECT cat_id FROM silver_crm_prd_info>
-- no unwanted space
-- no nulls and blank values

SELECT id
FROM bronze_erp_px_cat_g1v2;

SELECT cat_id FROM silver_crm_prd_info;



SELECT id
FROM bronze_erp_px_cat_g1v2
WHERE 
	id != TRIM(id) OR
    id IS NULL;
    
SELECT id, COUNT(*)
FROM bronze_erp_px_cat_g1v2
GROUP BY id
HAVING COUNT(*) > 1;

SELECT id
FROM bronze_erp_px_cat_g1v2
WHERE id NOT IN (SELECT DISTINCT cat_id FROM silver_crm_prd_info);


-- script to show 'id' value with no matching 'cat_id' value
-- and 'cat_id' value with no matching 'id' value
SELECT cat_id as cat_id_foreign, id as cat_id_primary
FROM silver_crm_prd_info t1
LEFT JOIN bronze_erp_px_cat_g1v2 t2
	ON t1.cat_id = REPLACE(t2.id, '_', '-')
WHERE id IS NULL

UNION

SELECT cat_id, id
FROM silver_crm_prd_info t1
RIGHT JOIN bronze_erp_px_cat_g1v2 t2
	ON t1.cat_id = REPLACE(t2.id, '_', '-')
WHERE cat_id IS NULL;

-- based on the QC, we need to change 'CO-PE' from cat_id on silver_crm_prd_info into 'CO-PD'
-- modification will be applied on silver_crm_load script
-- replace delimiter in the id column. From '_' to '-'
-- remove any unwanted space

SELECT 
	id,
    REPLACE(TRIM(id), '_', '-') as id_new
FROM bronze_erp_px_cat_g1v2;

-- --------------------------------------------------------------------------------------------
-- cat
-- no unwanted space
-- no nulls and blank values
-- standardize values: 'Male' / 'Female' / 'N/A' values only. No M / F / NULL
SELECT DISTINCT cat
FROM bronze_erp_px_cat_g1v2; -- identify distinct values if standardization is needed

SELECT cat
FROM bronze_erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR
	  cat IS NULL; 

-- remove any unwanted space
SELECT 
	cat,
    TRIM(cat) as cat_new
FROM bronze_erp_px_cat_g1v2;

-- --------------------------------------------------------------------------------------------
-- subcat
-- no unwanted space
-- no nulls and blank values
-- standardize values: 'Male' / 'Female' / 'N/A' values only. No M / F / NULL
-- check if there are cat with the same subcat value

SELECT subcat
FROM bronze_erp_px_cat_g1v2
WHERE 
	subcat != TRIM(subcat) OR
	subcat IS NULL; -- check if there are NULL or unwanted space
    
SELECT *
FROM bronze_erp_px_cat_g1v2 t1
INNER JOIN bronze_erp_px_cat_g1v2 t2
	ON t1.subcat = t2.subcat AND t1.cat <> t2.cat; -- check if there are category with the same subcat value

-- remove any unwanted space
SELECT 
	subcat,
    TRIM(subcat) as subcat_new
FROM bronze_erp_px_cat_g1v2;

-- --------------------------------------------------------------------------------------------
-- maintenance
-- no unwanted space
-- no nulls and blank values
-- standardize values: 'Male' / 'Female' / 'N/A' values only. No M / F / NULL

SELECT DISTINCT
	maintenance
FROM bronze_erp_px_cat_g1v2; -- identify distinct values if standardization is needed

SELECT maintenance
FROM bronze_erp_px_cat_g1v2
WHERE maintenance != TRIM(maintenance) OR
	  maintenance IS NULL; -- check if there are NULL or unwanted space

-- remove any unwanted space
SELECT 
	maintenance,
    TRIM(maintenance) as maintenance_new
FROM bronze_erp_px_cat_g1v2;
