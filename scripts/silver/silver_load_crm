/* Script purpose:
	Loading cleaned and normalize data in the silver_crm_<tables>
    
    naming of file <layer>_load_<source>
    Naming of table: <layer>_<source>_<filename> 
*/

--  Select the schema where the project is stored.
	USE project1_datawarehouse;
    
-- ======================================================================================================
-- Loading data into silver_crm_cust_info table.
TRUNCATE TABLE silver_crm_cust_info; -- this removes any data in the specified table before inserting data into it.

INSERT INTO silver_crm_cust_info (
	cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date)

SELECT 
	cst_id,
    TRIM(cst_key) AS cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE
		WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'n/a'
	END AS cst_marital_status,
     CASE UPPER(TRIM(cst_gndr))
		WHEN 'M' THEN 'Male'
        WHEN 'F' THEN 'Female'
        ELSE 'n/a'
	END AS cst_gndr,
    cst_create_date
FROM (
	SELECT 
		*, 
		ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as rownum -- rows with rownum = 1 are cst_id with latest cst_create_date
	FROM bronze_crm_cust_info) AS T1
WHERE rownum = 1 AND cst_id IS NOT NULL;

-- ======================================================================================================
-- Loading data into silver_crm_prd_info table.
TRUNCATE TABLE silver_crm_prd_info; -- this removes any data in the specified table before inserting data into it.

INSERT INTO silver_crm_prd_info (
prd_id,
cat_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
)

SELECT
	prd_id,
    CASE
		WHEN SUBSTRING_INDEX(TRIM(prd_key), '-', 2) = 'CO-PE' THEN 'CO-PD' -- This is needed to exactly match all primary key in erp_px_cat_g1v2 table
        ELSE SUBSTRING_INDEX(TRIM(prd_key), '-', 2)
    END as cat_id,
	SUBSTRING(prd_key, LENGTH(SUBSTRING_INDEX(TRIM(prd_key), '-', 2)) + 2, LENGTH(prd_key)) as prd_key,
    TRIM(prd_nm) as prd_nm,
    COALESCE(prd_cost, 0) as prd_cost,
    CASE TRIM(UPPER(prd_line))
		WHEN 'R' THEN 'Road'
        WHEN 'S' THEN 'other Sales'
        WHEN 'M' THEN 'Mountain'
        WHEN 'T' THEN 'Touring'
        ELSE 'n/a'
	END as prd_line,
    prd_start_dt,
    CASE
		WHEN prd_start_dt > prd_end_dt THEN DATE_SUB(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 Day)
        ELSE prd_end_dt
	END as prd_end_dt
FROM (
SELECT *, ROW_NUMBER() OVER (PARTITION BY prd_id ORDER BY prd_start_dt DESC) AS rownum
FROM bronze_crm_prd_info) as T1
WHERE rownum = 1 AND prd_id IS NOT NULL;


-- ======================================================================================================
-- Loading data into silver_crm_prd_info table.
TRUNCATE TABLE silver_crm_sales_details; -- this removes any data in the specified table before inserting data into it.

INSERT INTO silver_crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
)

SELECT
	TRIM(sls_ord_num) as sls_ord_num,
    TRIM(sls_prd_key) as sls_prd_key,
    sls_cust_id,
    CASE
		WHEN sls_order_dt IS NULL OR LENGTH(sls_order_dt) != 8 OR sls_order_dt <= 0 OR sls_order_dt > sls_ship_dt THEN DATE_SUB(STR_TO_DATE(sls_ship_dt, '%Y%m%d'), INTERVAL 7 DAY)
        ELSE STR_TO_DATE(sls_order_dt, '%Y%m%d')
	END as sls_order_dt,
    STR_TO_DATE(sls_ship_dt, '%Y%m%d') as sls_ship_dt,
    STR_TO_DATE(sls_due_dt, '%Y%m%d') as sls_due_dt,
    
    CASE
		WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != ABS(sls_quantity * sls_price) THEN CAST(ABS(sls_quantity * sls_price) AS DECIMAL(10,2))
		ELSE CAST(sls_sales AS DECIMAL(10,2))
	END as sls_sales,
    sls_quantity,
    CASE
		WHEN sls_price IS NULL or sls_price = 0 THEN CAST(ABS(sls_sales / sls_quantity) AS DECIMAL(10,2))
		WHEN sls_price < 0 THEN CAST(ABS(sls_price) AS DECIMAL(10,2))
		ELSE CAST(sls_price AS DECIMAL(10,2))
	END as sls_price
FROM bronze_crm_sales_details;
